{"version":3,"sources":["webpack:///./src/layouts/page.js","webpack:///./src/layouts/index.js","webpack:///./gatsby-config.js","webpack:///./src/utils/typography.js"],"names":["PageTemplate","render","currentPage","this","props","data","wordpressPage","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layouts__WEBPACK_IMPORTED_MODULE_2__","dangerouslySetInnerHTML","__html","title","content","Component","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","_gatsby_config__WEBPACK_IMPORTED_MODULE_3__","HeadHelmet","_ref","children","name","description","siteMetadata","author","rel","type","href","module","exports","siteUrl","pathPrefix","plugins","resolve","options","pathToConfigModule","path","__dirname","fonts","maxWidth","short_name","start_url","background_color","theme_color","display","icon","baseUrl","protocol","hostingWPCOM","useACF","acfOptionPageIds","auth","verboseOutput","perPage","concurrentRequests","includedRoutes","normalizer","entities","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","typography_theme_bootstrap__WEBPACK_IMPORTED_MODULE_1__","typography_theme_bootstrap__WEBPACK_IMPORTED_MODULE_1___default","Typography","bootstrapTheme"],"mappings":"sLAMMA,oGACJC,OAAA,WACE,IAAMC,EAAcC,KAAKC,MAAMC,KAAKC,cAEpC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,MAAIE,wBAAyB,CAAEC,OAAQV,EAAYW,SACnDN,EAAAC,EAAAC,cAAA,OAAKE,wBAAyB,CAAEC,OAAQV,EAAYY,gBAPjCC,cAaZf,YAER,IAAMgB,EAAS,+CCrBtB,IAAAC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,GAAAH,EAAA,GAAAA,EAAA,MAAAI,EAAAJ,EAAAE,EAAAC,GAAAE,EAAAL,EAAA,KAyBeM,IApBI,SAAAC,KAAGC,SAAH,OACjBP,EAAAX,EAAAC,cAAA,WACEU,EAAAX,EAAAC,cAACa,EAAAd,EAAD,KACEW,EAAAX,EAAAC,cAAA,QAAMkB,KAAK,SAASC,YAAaC,eAAaC,SAC9CX,EAAAX,EAAAC,cAAA,QACEsB,IAAI,aACJC,KAAK,WACLC,KAAK,8EAEPd,EAAAX,EAAAC,cAAA,QACEsB,IAAI,aACJC,KAAK,WACLC,KAAK,oFAEPd,EAAAX,EAAAC,cAAA,aAAQoB,eAAahB,OACrBM,EAAAX,EAAAC,cAAA,QAAMsB,IAAI,OAAOE,KAAK,wBAAwBD,KAAK,wCCpBzDE,cAAOC,QAAU,CACfN,aAAc,CACZhB,MAAO,UACPiB,OAAQ,iBACRF,YAAa,mBACbQ,QAAO,6BAETC,WAAY,IACZC,QAAS,yBAEP,CACEC,QAAO,2BACPC,QAAS,CACPC,mBAAkB,4BAGtB,CACEF,QAAO,2BACPC,QAAS,CACPb,KAAI,SACJe,KAASC,EAAL,uBAGR,CACEJ,QAAO,6BACPC,QAAS,CACPI,MAAO,mCAGX,CACEL,QAAO,4BACPC,QAAS,CACPF,QAAS,CAAC,CACNC,QAAO,uBACPC,QAAS,CACPK,SAAU,MAGd,qCAIN,CACEN,QAAO,yBACPC,QAAS,CACPb,KAAM,kBACNmB,WAAY,UACZC,UAAW,IACXC,iBAAkB,UAClBC,YAAa,UACbC,QAAS,aACTC,KAAM,+BA3CH,+BA+CP,wBA/CO,mGAoDP,CACEZ,QAAS,0BACTC,QAAS,CAKPY,QAAS,YAETC,SAAU,OAKVC,cAAc,EAIdC,QAAQ,EAORC,iBAAkB,GAClBC,KAAM,GAyBNC,eAAe,EAEfC,QAAS,IAOTC,mBAAoB,GAUpBC,eAAgB,CACd,kBACA,aACA,aACA,aACA,YACA,kBACA,cAKFC,WAAY,SAAArC,GAGV,OADCA,EADDsC,iEC/IV,IAAAC,EAAA9C,EAAA,KAAA+C,EAAA/C,EAAAE,EAAA4C,GAAAE,EAAAhD,EAAA,KAAAiD,EAAAjD,EAAAE,EAAA8C,GAGmB,IAAIE,IAAWC","file":"component---src-layouts-page-js-bd5f02adc04d5be8ac26.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../layouts\"\r\n\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nclass PageTemplate extends Component {\r\n  render() {\r\n    const currentPage = this.props.data.wordpressPage\r\n\r\n    return (\r\n      <Layout>\r\n        <h1 dangerouslySetInnerHTML={{ __html: currentPage.title }} />\r\n        <div dangerouslySetInnerHTML={{ __html: currentPage.content }} />\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PageTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query($id: String!) {\r\n    wordpressPage(id: { eq: $id }) {\r\n      title\r\n      content\r\n      date(formatString: \"MMMM DD, YYYY\")\r\n    }\r\n    site {\r\n      id\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { siteMetadata } from \"../../gatsby-config\";\r\n\r\nconst HeadHelmet = ({ children }) => (\r\n  <div>\r\n    <Helmet>\r\n      <meta name=\"author\" description={siteMetadata.author} />\r\n      <link\r\n        rel=\"stylesheet\"\r\n        type=\"text/css\"\r\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\r\n      />\r\n      <link\r\n        rel=\"stylesheet\"\r\n        type=\"text/css\"\r\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\r\n      />\r\n      <title>{siteMetadata.title}</title>\r\n      <link rel=\"icon\" href=\"../assets/favicon.png\" type=\"image/x-icon\"/>\r\n    </Helmet>\r\n  </div>\r\n);\r\n\r\nexport default HeadHelmet;\r\n","module.exports = {\r\n  siteMetadata: {\r\n    title: \"G.Ronca\",\r\n    author: \"Giuseppe Ronca\",\r\n    description: \"Personal website\",\r\n    siteUrl: `https://g-ronca.github.io`,\r\n  },\r\n  pathPrefix: \"/\",\r\n  plugins: [\r\n    `gatsby-plugin-sitemap`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography.js`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/assets/images`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-google-fonts`,\r\n      options: {\r\n        fonts: [`librebaskerville`, `open sans`]\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-transformer-remark`,\r\n      options: {\r\n        plugins: [{\r\n            resolve: `gatsby-remark-images`,\r\n            options: {\r\n              maxWidth: 630\r\n            }\r\n          },\r\n          \"gatsby-remark-copy-linked-files\"\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-manifest`,\r\n      options: {\r\n        name: 'G.Ronca Website',\r\n        short_name: 'G.Ronca',\r\n        start_url: '/',\r\n        background_color: '#182216',\r\n        theme_color: '#182216',\r\n        display: \"fullscreen\",\r\n        icon: 'src/assets/images/logo.png', // This path is relative to the root of the site.\r\n      }\r\n    },\r\n    `gatsby-plugin-compression-v2`,\r\n    'gatsby-plugin-offline',\r\n    `gatsby-transformer-sharp`,\r\n    `gatsby-plugin-sharp`,\r\n    `gatsby-plugin-react-helmet`,\r\n    `gatsby-plugin-sass`,\r\n    {\r\n      resolve: \"gatsby-source-wordpress\",\r\n      options: {\r\n        /*\r\n         * The base URL of the Wordpress site without the trailingslash and the protocol. This is required.\r\n         * Example : 'gatsbyjsexamplewordpress.wordpress.com' or 'www.example-site.com'\r\n         */\r\n        baseUrl: \"localhost\",\r\n        // The protocol. This can be http or https.\r\n        protocol: \"http\",\r\n        // Indicates whether the site is hosted on wordpress.com.\r\n        // If false, then the assumption is made that the site is self hosted.\r\n        // If true, then the plugin will source its content on wordpress.com using the JSON REST API V2.\r\n        // If your site is hosted on wordpress.org, then set this to false.\r\n        hostingWPCOM: false,\r\n        // If useACF is true, then the source plugin will try to import the Wordpress ACF Plugin contents.\r\n        // This feature is untested for sites hosted on wordpress.com.\r\n        // Defaults to true.\r\n        useACF: false,\r\n        // Include specific ACF Option Pages that have a set post ID\r\n        // Regardless if an ID is set, the default options route will still be retrieved\r\n        // Must be using V3 of ACF to REST to include these routes\r\n        // Example: `[\"option_page_1\", \"option_page_2\"]` will include the proper ACF option\r\n        // routes with the ID option_page_1 and option_page_2\r\n        // Dashes in IDs will be converted to underscores for use in GraphQL\r\n        acfOptionPageIds: [],\r\n        auth: {\r\n          // If auth.user and auth.pass are filled, then the source plugin will be allowed\r\n          // to access endpoints that are protected with .htaccess.\r\n          //htaccess_user: \"your-htaccess-username\",\r\n          //htaccess_pass: \"your-htaccess-password\",\r\n          //htaccess_sendImmediately: false,\r\n\r\n          // If hostingWPCOM is true then you will need to communicate with wordpress.com API\r\n          // in order to do that you need to create an app (of type Web) at https://developer.wordpress.com/apps/\r\n          // then add your clientId, clientSecret, username, and password here\r\n          // Learn about environment variables: https://www.gatsbyjs.org/docs/environment-variables\r\n          // If two-factor authentication is enabled then you need to create an Application-Specific Password,\r\n          // see https://en.support.wordpress.com/security/two-step-authentication/#application-specific-passwords\r\n          /*wpcom_app_clientSecret: process.env.WORDPRESS_CLIENT_SECRET,\r\n          wpcom_app_clientId: \"54793\",\r\n          wpcom_user: \"gatsbyjswpexample@gmail.com\",\r\n          wpcom_pass: process.env.WORDPRESS_PASSWORD,\r\n\r\n          // If you use \"JWT Authentication for WP REST API\" (https://wordpress.org/plugins/jwt-authentication-for-wp-rest-api/)\r\n          // plugin, you can specify user and password to obtain access token and use authenticated requests against wordpress REST API.\r\n          jwt_user: process.env.JWT_USER,\r\n          jwt_pass: process.env.JWT_PASSWORD,*/\r\n        },\r\n        // Set verboseOutput to true to display a verbose output on `npm run develop` or `npm run build`\r\n        // It can help you debug specific API Endpoints problems.\r\n        verboseOutput: false,\r\n        // Set how many pages are retrieved per API request.\r\n        perPage: 100,\r\n        // Search and Replace Urls across WordPress content.\r\n        /*searchAndReplaceContentUrls: {\r\n          sourceUrl: \"https://source-url.com\",\r\n          replacementUrl: \"https://replacement-url.com\",\r\n        },*/\r\n        // Set how many simultaneous requests are sent at once.\r\n        concurrentRequests: 10,\r\n        // Set WP REST API routes whitelists\r\n        // and blacklists using glob patterns.\r\n        // Defaults to whitelist the routes shown\r\n        // in the example below.\r\n        // See: https://github.com/isaacs/minimatch\r\n        // Example:  `[\"/*/*/comments\", \"/yoast/**\"]`\r\n        // ` will either include or exclude routes ending in `comments` and\r\n        // all routes that begin with `yoast` from fetch.\r\n        // Whitelisted routes using glob patterns\r\n        includedRoutes: [\r\n          \"/*/*/categories\",\r\n          \"/*/*/posts\",\r\n          \"/*/*/pages\",\r\n          \"/*/*/media\",\r\n          \"/*/*/tags\",\r\n          \"/*/*/taxonomies\",\r\n          \"/*/*/users\",\r\n        ],\r\n        // Blacklisted routes using glob patterns\r\n        //excludedRoutes: [\"/*/*/posts/1456\"],\r\n        // use a custom normalizer which is applied after the built-in ones.\r\n        normalizer: function ({\r\n          entities\r\n        }) {\r\n          return entities\r\n        }\r\n      }\r\n    }\r\n  ]\r\n};","import Typography from \"typography\";\r\nimport bootstrapTheme from \"typography-theme-bootstrap\";\r\n\r\nconst typography = new Typography(bootstrapTheme);\r\n\r\nexport default typography;\r\n"],"sourceRoot":""}